package controller

import (
	"bidfood/model"
	services "bidfood/services"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"time"

	"github.com/julienschmidt/httprouter"
)

type Controller struct {
	ProductService services.Services
}

func New() *Controller {
	return &Controller{
		ProductService: services.New(),
	}
}

func NewController(service services.Services) *Controller {
	return &Controller{
		ProductService: service,
	}
}

func (c *Controller) GetAllProduct(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {

	var resp []model.Product
	var err error
	if idStr := r.URL.Query().Get("page"); idStr != "" {
		id, err := strconv.Atoi(idStr)
		if err != nil {
			http.Error(w, "Invalid page number", http.StatusBadRequest)
			return
		}
		id = id - 1
		if id < 0 {
			http.Error(w, "Invalid page number", http.StatusBadRequest)
			return
		}
		resp, err = c.ProductService.GetPaginationProduct(id)
		if err != nil {
			http.Error(w, err.Error(), http.StatusOK)
			return
		}
	} else {
		resp, err = c.ProductService.GetAllProduct()
		if err != nil {
			fmt.Fprint(w, err.Error())
			return
		}
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(resp)
}

func (c *Controller) AddNewProduct(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	var product model.Product
	err := json.NewDecoder(r.Body).Decode(&product)
	if err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	resp, err := c.ProductService.InsertProduct(product)

	if err != nil {
		http.Error(w, err.Error(), http.StatusOK)
		return
	}

	// Set header response ke application/json
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	// Encode struct ke JSON dan kirim ke client
	json.NewEncoder(w).Encode(resp)

}

func (c *Controller) GetProductByID(w http.ResponseWriter, r *http.Request, params httprouter.Params) {
	idStr := params.ByName("id")

	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	resp, err := c.ProductService.GetProductByID(id)

	if err != nil {
		http.Error(w, err.Error(), http.StatusOK)
		return
	}

	// Set header response ke application/json
	w.Header().Set("Content-Type", "application/json")
	// Encode struct ke JSON dan kirim ke client
	json.NewEncoder(w).Encode(resp)

}

func (c *Controller) UpdateProductByID(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	var product model.Product
	err := json.NewDecoder(r.Body).Decode(&product)
	if err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	resp, err := c.ProductService.UpdateProduct(product)

	if err != nil {
		http.Error(w, err.Error(), http.StatusOK)
		return
	}

	// Set header response ke application/json
	w.Header().Set("Content-Type", "application/json")
	// Encode struct ke JSON dan kirim ke client
	json.NewEncoder(w).Encode(resp)
}

func (c *Controller) DeleteProduct(w http.ResponseWriter, r *http.Request, params httprouter.Params) {
	idStr := params.ByName("id")

	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	resp, err := c.ProductService.DeleteProduct(id)

	if err != nil {
		http.Error(w, err.Error(), http.StatusOK)
		return
	}

	// Set header response ke application/json
	w.Header().Set("Content-Type", "application/json")
	// Encode struct ke JSON dan kirim ke client
	json.NewEncoder(w).Encode(resp)
}

func (c *Controller) TestAddProduct(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	for i := 0; i <= 20; i++ {
		count := strconv.Itoa(i + 1)
		product := model.Product{Name: "Baju" + count, Desc: "Baju Anak-Anak"}
		c.ProductService.InsertProduct(product)
	}

	w.WriteHeader(http.StatusOK) // optional, default 200 OK

	fmt.Fprint(w, "OK - Insert!!")
}

func (c *Controller) Home(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	time.Sleep(10 * time.Second)
	w.Write([]byte("Home\n"))
}
